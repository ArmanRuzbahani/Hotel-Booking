// <auto-generated />
using System;
using Hotel_Booking_Infrastruters.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hotel_Booking_Infrastruters.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entitys_Hotel.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("City")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Education")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailVerfied")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhoneNumberVerfied")
                        .HasColumnType("bit");

                    b.Property<int?>("Job")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Nationality")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UserCreateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("admins");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfNights")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomId");

                    b.ToTable("bookings");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("City")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Education")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailVerfied")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhoneNumberVerfied")
                        .HasColumnType("bit");

                    b.Property<int?>("Job")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Nationality")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UserCreateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("customers");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CloseAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<int>("iranCityForHotel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelManagerId");

                    b.ToTable("hotels");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.HotelAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("hotelAddresses");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.HotelComments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("HotelId");

                    b.ToTable("hotelComments");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.HotelManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("City")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Education")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailVerfied")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhoneNumberVerfied")
                        .HasColumnType("bit");

                    b.Property<int?>("Job")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Nationality")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UserCreateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("hotelManager");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CountPriceAfterDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEmpty")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("roomType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("FacilityHotel", b =>
                {
                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.HasKey("FacilitiesId", "HotelId");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelFacilities", (string)null);
                });

            modelBuilder.Entity("Hotel_Booking_Domain.Core.Entitys.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Hotel_Booking_Domain.Core.Entitys.ChatConversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConversationData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("chatConversations");
                });

            modelBuilder.Entity("Hotel_Booking_Domain.Core.Entitys.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Facility");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "پارکینگ"
                        },
                        new
                        {
                            Id = 2,
                            Name = "استخر"
                        },
                        new
                        {
                            Id = 3,
                            Name = "اینترنت رایگان"
                        },
                        new
                        {
                            Id = 4,
                            Name = "رستوران"
                        },
                        new
                        {
                            Id = 5,
                            Name = "خشکشویی"
                        },
                        new
                        {
                            Id = 6,
                            Name = "سالن ورزشی"
                        },
                        new
                        {
                            Id = 7,
                            Name = "اتاق جلسات"
                        },
                        new
                        {
                            Id = 8,
                            Name = "اسپا و ماساژ"
                        },
                        new
                        {
                            Id = 9,
                            Name = "خدمات اتاق"
                        },
                        new
                        {
                            Id = 10,
                            Name = "تلویزیون کابلی"
                        },
                        new
                        {
                            Id = 11,
                            Name = "مینی‌بار"
                        },
                        new
                        {
                            Id = 12,
                            Name = "سرویس فرودگاهی"
                        },
                        new
                        {
                            Id = 13,
                            Name = "تسهیلات دسترسی برای افراد معلول"
                        },
                        new
                        {
                            Id = 14,
                            Name = "خدمات 24 ساعته"
                        },
                        new
                        {
                            Id = 15,
                            Name = "بار و کافی‌شاپ"
                        },
                        new
                        {
                            Id = 16,
                            Name = "اتاق‌های ضد سیگار"
                        },
                        new
                        {
                            Id = 17,
                            Name = "خدمات تور و گردشگری"
                        },
                        new
                        {
                            Id = 18,
                            Name = "پارک بازی کودکان"
                        },
                        new
                        {
                            Id = 19,
                            Name = "آسانسور"
                        },
                        new
                        {
                            Id = 20,
                            Name = "کتابخانه"
                        });
                });

            modelBuilder.Entity("Hotel_Booking_Domain.Core.Entitys.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("food");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "برنج ایرانی معطر همراه با ۲ سیخ کباب کوبیده گوسفندی و مخلفات",
                            Name = "چلو کباب",
                            Picture = "koobide.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Description = "خورش اصیل ایرانی با سبزی تازه، لوبیا قرمز و گوشت گوسفندی",
                            Name = "قورمه سبزی",
                            Picture = "qormesabzi.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Description = "خورش سنتی با گوشت قلقلی، گردوی آسیاب شده و رب انار ترش و شیرین",
                            Name = "فسنجان",
                            Picture = "fesenjan-goosht-ghelgheli.jpg"
                        },
                        new
                        {
                            Id = 4,
                            Description = "آبگوشت سنتی ایرانی با نخود، لوبیا، سیب‌زمینی و گوشت گوسفندی",
                            Name = "دیزی",
                            Picture = "Abgoosht.jpg"
                        },
                        new
                        {
                            Id = 5,
                            Description = "خورش لذیذ با لپه، سیب‌زمینی سرخ‌شده و گوشت گوسفندی",
                            Name = "قیمه",
                            Picture = "qeyme.jpg"
                        },
                        new
                        {
                            Id = 6,
                            Description = "برنج زعفرانی همراه با مرغ سرخ‌شده و زرشک تازه",
                            Name = "زرشک پلو با مرغ",
                            Picture = "zereshk-polo-morgh.jpg"
                        },
                        new
                        {
                            Id = 7,
                            Description = "پلو معطر با شوید و باقالی به همراه گوشت ماهیچه گوسفندی",
                            Name = "باقالی پلو با ماهیچه",
                            Picture = "baghali-polo-ba-mahicheh.jpg"
                        },
                        new
                        {
                            Id = 8,
                            Description = "لایه‌های برنج زعفرانی با مرغ، ماست و زرده تخم‌مرغ، با ته‌دیگ طلایی",
                            Name = "ته چین",
                            Picture = "Tachin.jpg"
                        },
                        new
                        {
                            Id = 9,
                            Description = "فیله مرغ مزه‌دارشده و کبابی با برنج ایرانی و گوجه کبابی",
                            Name = "جوجه کباب",
                            Picture = "jojekabab.jpg"
                        },
                        new
                        {
                            Id = 10,
                            Description = "برنج ایرانی همراه با رشته پلویی، کشمش و گوشت خورشتی",
                            Name = "رشته پلو",
                            Picture = "reshteh-polo-gosht-min.jpg"
                        },
                        new
                        {
                            Id = 11,
                            Description = "ترکیب بادمجان سرخ‌شده، کشک، نعناع داغ و گردوی خرد شده",
                            Name = "کشک بادمجان",
                            Picture = "kashk-bademjan-kababi.jpg"
                        },
                        new
                        {
                            Id = 12,
                            Description = "مرغ پخته‌شده با ادویه‌های مخصوص هندی و برنج معطر",
                            Name = "مرغ بریانی",
                            Picture = "beryani.jpg"
                        },
                        new
                        {
                            Id = 13,
                            Description = "پلو با شوید و باقالی تازه همراه با مرغ سرخ‌شده",
                            Name = "باقالی پلو با مرغ",
                            Picture = "baghali-polo-morgh-1.jpg"
                        },
                        new
                        {
                            Id = 14,
                            Description = "پیتزا با گوشت چرخ‌کرده، قارچ، فلفل دلمه‌ای و پنیر کشدار",
                            Name = "پیتزا مخلوط",
                            Picture = "makhloot.jpg"
                        },
                        new
                        {
                            Id = 15,
                            Description = "پیتزا با مرغ، قارچ، گوشت دودی و پنیر موزارلا",
                            Name = "پیتزای مخصوص",
                            Picture = "makhsoos.jpg"
                        },
                        new
                        {
                            Id = 16,
                            Description = "پیتزای کلاسیک با پپرونی تند، پنیر و سس گوجه‌فرنگی",
                            Name = "پیتزای پپرونی",
                            Picture = "pizzapeperoni.jpg"
                        },
                        new
                        {
                            Id = 17,
                            Description = "پیتزا با تکه‌های استیک گوشت، سیر تازه و پنیر کشدار",
                            Name = "پیتزای سیر استیک",
                            Picture = "pizzasirestake.jpg"
                        },
                        new
                        {
                            Id = 18,
                            Description = "مارگاریتا با گوجه تازه، ریحان سبز و پنیر موزارلا",
                            Name = "پیتزای ایتالیایی",
                            Picture = "pizzaitaly.jpg"
                        },
                        new
                        {
                            Id = 19,
                            Description = "پیتزا گیاهی با قارچ، ذرت، زیتون، فلفل دلمه‌ای و پنیر",
                            Name = "پیتزا سبزیجات",
                            Picture = "pizzasabsijat.jpg"
                        },
                        new
                        {
                            Id = 20,
                            Description = "پیتزا با گوشت چرخ‌کرده، سس مخصوص و پنیر زیاد",
                            Name = "پیتزای آمریکایی",
                            Picture = "pizzaamerican.jpg"
                        },
                        new
                        {
                            Id = 21,
                            Description = "پیتزا ترکی با سوسیس سوجوک، سبزیجات و پنیر",
                            Name = "پیتزای سوجوک",
                            Picture = "pizaasojock.jpeg"
                        },
                        new
                        {
                            Id = 22,
                            Description = "پاستا با سس آلفردو، مرغ گریل‌شده و قارچ تازه",
                            Name = "پاستا آلفردو",
                            Picture = "pastaalfredo.jpg"
                        },
                        new
                        {
                            Id = 23,
                            Description = "لازانیا با گوشت چرخ‌کرده، سس بشامل و پنیر فراوان",
                            Name = "لازانیا گوشت",
                            Picture = "lazania.jpg"
                        },
                        new
                        {
                            Id = 24,
                            Description = "مرغ خلالی با قارچ، پیاز و سس خامه‌ای",
                            Name = "چیکن استراگانوف",
                            Picture = "chiken-estraganof.jpg"
                        },
                        new
                        {
                            Id = 25,
                            Description = "مرغ ترد سوخاری‌شده با ادویه مخصوص و سیب‌زمینی سرخ‌کرده",
                            Name = "مرغ سوخاری",
                            Picture = "kentaki.jpg"
                        },
                        new
                        {
                            Id = 26,
                            Description = "سالاد سبزیجات تازه با سس مخصوص",
                            Name = "سالاد",
                            Picture = "salad.jpg"
                        },
                        new
                        {
                            Id = 27,
                            Description = "کاهو تازه، مرغ گریل‌شده، پنیر پارمسان و نان برشته",
                            Name = "سالاد سزار",
                            Picture = "sezar.jpg"
                        },
                        new
                        {
                            Id = 29,
                            Description = "آب معدنی خنک و تازه",
                            Name = "آب",
                            Picture = "water.png"
                        },
                        new
                        {
                            Id = 30,
                            Description = "نوشابه گازدار با طعم کولا",
                            Name = "نوشابه مشکی",
                            Picture = "kok.jpg"
                        },
                        new
                        {
                            Id = 31,
                            Description = "نوشابه گازدار با طعم پرتقال",
                            Name = "نوشابه زرد",
                            Picture = "fanta.jpg"
                        },
                        new
                        {
                            Id = 32,
                            Description = "نوشابه گازدار با طعم لیمو",
                            Name = "اسپرایت",
                            Picture = "sprite.jpg"
                        },
                        new
                        {
                            Id = 33,
                            Description = "دوغ سنتی ایرانی با نعناع",
                            Name = "دوغ",
                            Picture = "doq.jpg"
                        },
                        new
                        {
                            Id = 34,
                            Description = "پلو ایرانی با لوبیا سبز، گوشت و رب گوجه",
                            Name = "لوبیا پلو",
                            Picture = "loobia-polo.jpg"
                        },
                        new
                        {
                            Id = 35,
                            Description = "پاستای ایرانی با سس گوشت و رب گوجه",
                            Name = "ماکارونی",
                            Picture = "makarani.jpg"
                        },
                        new
                        {
                            Id = 36,
                            Description = "دلمه برگ مو با برنج، سبزیجات و گوشت چرخ‌کرده",
                            Name = "دلمه",
                            Picture = "dolme-barg-mo.jpg"
                        },
                        new
                        {
                            Id = 37,
                            Description = "پلو سبزی‌جات معطر همراه با ماهی سرخ‌شده یا کبابی",
                            Name = "سبزی پلو با ماهی",
                            Picture = "sabzi-polo-ba-mahi.jpg"
                        });
                });

            modelBuilder.Entity("Hotel_Booking_Domain.Core.Entitys.HotelFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailableInYourHotel")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("HotelId");

                    b.ToTable("hotelFood");
                });

            modelBuilder.Entity("Hotel_Booking_Domain.Core.Entitys.HotelRules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("hotelRules");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Address", b =>
                {
                    b.HasOne("Entitys_Hotel.Models.Customer", "Customer")
                        .WithMany("Address")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Admin", b =>
                {
                    b.HasOne("Hotel_Booking_Domain.Core.Entitys.AppUser", "AppUser")
                        .WithOne("Admin")
                        .HasForeignKey("Entitys_Hotel.Models.Admin", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Booking", b =>
                {
                    b.HasOne("Entitys_Hotel.Models.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entitys_Hotel.Models.Hotel", "Hotel")
                        .WithMany("Bookings")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entitys_Hotel.Models.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Hotel");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Customer", b =>
                {
                    b.HasOne("Hotel_Booking_Domain.Core.Entitys.AppUser", "AppUser")
                        .WithOne("Customer")
                        .HasForeignKey("Entitys_Hotel.Models.Customer", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Hotel", b =>
                {
                    b.HasOne("Entitys_Hotel.Models.HotelManager", "HotelManager")
                        .WithMany("hotels")
                        .HasForeignKey("HotelManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HotelManager");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.HotelAddress", b =>
                {
                    b.HasOne("Entitys_Hotel.Models.Hotel", "Hotel")
                        .WithMany("HotelAddresses")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.HotelComments", b =>
                {
                    b.HasOne("Entitys_Hotel.Models.Customer", "Customer")
                        .WithMany("HotelComments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entitys_Hotel.Models.Hotel", "Hotel")
                        .WithMany("HotelComments")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.HotelManager", b =>
                {
                    b.HasOne("Hotel_Booking_Domain.Core.Entitys.AppUser", "AppUser")
                        .WithOne("HotelManager")
                        .HasForeignKey("Entitys_Hotel.Models.HotelManager", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Room", b =>
                {
                    b.HasOne("Entitys_Hotel.Models.Hotel", "Hotel")
                        .WithMany("rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("FacilityHotel", b =>
                {
                    b.HasOne("Hotel_Booking_Domain.Core.Entitys.Facility", null)
                        .WithMany()
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entitys_Hotel.Models.Hotel", null)
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hotel_Booking_Domain.Core.Entitys.ChatConversation", b =>
                {
                    b.HasOne("Entitys_Hotel.Models.Customer", "Customer")
                        .WithMany("Conversation")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Hotel_Booking_Domain.Core.Entitys.HotelFood", b =>
                {
                    b.HasOne("Hotel_Booking_Domain.Core.Entitys.Food", "Food")
                        .WithMany("HotelFoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entitys_Hotel.Models.Hotel", "Hotel")
                        .WithMany("hotelFoods")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Hotel_Booking_Domain.Core.Entitys.HotelRules", b =>
                {
                    b.HasOne("Entitys_Hotel.Models.Hotel", "Hotel")
                        .WithMany("HotelRules")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Hotel_Booking_Domain.Core.Entitys.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Hotel_Booking_Domain.Core.Entitys.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel_Booking_Domain.Core.Entitys.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Hotel_Booking_Domain.Core.Entitys.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Customer", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Bookings");

                    b.Navigation("Conversation");

                    b.Navigation("HotelComments");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Hotel", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("HotelAddresses");

                    b.Navigation("HotelComments");

                    b.Navigation("HotelRules");

                    b.Navigation("hotelFoods");

                    b.Navigation("rooms");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.HotelManager", b =>
                {
                    b.Navigation("hotels");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Room", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Hotel_Booking_Domain.Core.Entitys.AppUser", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("HotelManager")
                        .IsRequired();
                });

            modelBuilder.Entity("Hotel_Booking_Domain.Core.Entitys.Food", b =>
                {
                    b.Navigation("HotelFoods");
                });
#pragma warning restore 612, 618
        }
    }
}
