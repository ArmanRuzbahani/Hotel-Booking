// <auto-generated />
using System;
using Hotel_Booking_Infrastruters.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hotel_Booking_Infrastruters.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entitys_Hotel.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("City")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Education")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailVerfied")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhoneNumberVerfied")
                        .HasColumnType("bit");

                    b.Property<int?>("Job")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Nationality")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UserCreateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardId = "1234567890123456",
                            City = 1,
                            DateOfBirth = new DateTime(2005, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Education = 5,
                            Email = "arman.ruzb@gmail.com",
                            Gender = 1,
                            IsActive = true,
                            IsEmailVerfied = false,
                            IsPhoneNumberVerfied = false,
                            Job = 3,
                            LastName = "روزبهانی",
                            MaritalStatus = 2,
                            Name = "آرمان",
                            Nationality = 1,
                            PhoneNumber = "+989123456789",
                            Role = 0,
                            UserCreateAt = new DateTime(2025, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfNights")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomId");

                    b.ToTable("bookings");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("City")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Education")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailVerfied")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhoneNumberVerfied")
                        .HasColumnType("bit");

                    b.Property<int?>("Job")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Nationality")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UserCreateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CloseAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<int>("iranCityForHotel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelManagerId");

                    b.ToTable("hotels");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.HotelAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("hotelAddresses");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.HotelComments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("HotelId");

                    b.ToTable("hotelComments");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.HotelManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("City")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Education")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailVerfied")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhoneNumberVerfied")
                        .HasColumnType("bit");

                    b.Property<int?>("Job")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Nationality")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UserCreateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("hotelManager");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CountPriceAfterDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEmpty")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("roomType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("FacilityHotel", b =>
                {
                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.HasKey("FacilitiesId", "HotelId");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelFacilities", (string)null);
                });

            modelBuilder.Entity("Hotel_Booking_Domain.Core.Entitys.ChatConversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConversationData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ChatConversation");
                });

            modelBuilder.Entity("Hotel_Booking_Domain.Core.Entitys.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Facility");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "پارکینگ"
                        },
                        new
                        {
                            Id = 2,
                            Name = "استخر"
                        },
                        new
                        {
                            Id = 3,
                            Name = "اینترنت رایگان"
                        },
                        new
                        {
                            Id = 4,
                            Name = "رستوران"
                        },
                        new
                        {
                            Id = 5,
                            Name = "خشکشویی"
                        },
                        new
                        {
                            Id = 6,
                            Name = "سالن ورزشی"
                        },
                        new
                        {
                            Id = 7,
                            Name = "اتاق جلسات"
                        },
                        new
                        {
                            Id = 8,
                            Name = "اسپا و ماساژ"
                        },
                        new
                        {
                            Id = 9,
                            Name = "خدمات اتاق"
                        },
                        new
                        {
                            Id = 10,
                            Name = "تلویزیون کابلی"
                        },
                        new
                        {
                            Id = 11,
                            Name = "مینی‌بار"
                        },
                        new
                        {
                            Id = 12,
                            Name = "سرویس فرودگاهی"
                        },
                        new
                        {
                            Id = 13,
                            Name = "تسهیلات دسترسی برای افراد معلول"
                        },
                        new
                        {
                            Id = 14,
                            Name = "خدمات 24 ساعته"
                        },
                        new
                        {
                            Id = 15,
                            Name = "بار و کافی‌شاپ"
                        },
                        new
                        {
                            Id = 16,
                            Name = "اتاق‌های ضد سیگار"
                        },
                        new
                        {
                            Id = 17,
                            Name = "خدمات تور و گردشگری"
                        },
                        new
                        {
                            Id = 18,
                            Name = "پارک بازی کودکان"
                        },
                        new
                        {
                            Id = 19,
                            Name = "آسانسور"
                        },
                        new
                        {
                            Id = 20,
                            Name = "کتابخانه"
                        });
                });

            modelBuilder.Entity("Hotel_Booking_Domain.Core.Entitys.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("food");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "با برنج ایرانی مخلفات و 200 گرم گوشت گوسفندی",
                            Name = "چلو کباب",
                            Picture = ""
                        },
                        new
                        {
                            Id = 2,
                            Description = "خورشتی ایرانی با سبزیجات، گوشت و لوبیا",
                            Name = "قورمه سبزی",
                            Picture = ""
                        },
                        new
                        {
                            Id = 3,
                            Description = "خورشت با گوشت و سس گردو و رب انار",
                            Name = "فسنجان",
                            Picture = ""
                        },
                        new
                        {
                            Id = 4,
                            Description = "خوراک سنتی ایرانی با گوشت گوسفند و سبزیجات",
                            Name = "دیزی",
                            Picture = ""
                        },
                        new
                        {
                            Id = 5,
                            Description = "برنج ایرانی مخلفات",
                            Name = "قیمه",
                            Picture = ""
                        },
                        new
                        {
                            Id = 6,
                            Description = "برنج زعفرانی همراه با مرغ و زرشک",
                            Name = "زرشک پلو با مرغ",
                            Picture = ""
                        },
                        new
                        {
                            Id = 7,
                            Description = "پلو با باقالی و گوشت ماهیچه",
                            Name = "باقالی پلو با ماهیچه",
                            Picture = ""
                        },
                        new
                        {
                            Id = 8,
                            Description = "پلو با مرغ و زعفران و ماست",
                            Name = "ته چین",
                            Picture = ""
                        },
                        new
                        {
                            Id = 9,
                            Description = "برنج ایرانی 200 گرم جوجه سینه",
                            Name = "جوجه کباب",
                            Picture = ""
                        },
                        new
                        {
                            Id = 10,
                            Description = "پلو با رشته، گوشت و زعفران",
                            Name = "رشته پلو",
                            Picture = ""
                        },
                        new
                        {
                            Id = 11,
                            Description = "غذای ساده و خوشمزه با بادمجان و کشک",
                            Name = "کشک بادمجان",
                            Picture = ""
                        },
                        new
                        {
                            Id = 12,
                            Description = "مرغ پخته شده با ادویه‌های خاص",
                            Name = "مرغ بریانی",
                            Picture = ""
                        },
                        new
                        {
                            Id = 13,
                            Description = "پلو با باقالی و گوشت",
                            Name = "باقالی پلو با مرغ",
                            Picture = ""
                        },
                        new
                        {
                            Id = 14,
                            Description = "پیتزا با ترکیب مختلف مواد اولیه مانند قارچ، گوشت، فلفل دلمه‌ای و پنیر",
                            Name = "پیتزا مخلوط",
                            Picture = ""
                        },
                        new
                        {
                            Id = 15,
                            Description = "پیتزا با ترکیب مواد خاص مانند گوشت مرغ، قارچ و پنیر موزارلا",
                            Name = "پیتزای مخصوص",
                            Picture = ""
                        },
                        new
                        {
                            Id = 16,
                            Description = "پیتزا با تکه‌های پپرونی، پنیر و سس گوجه‌فرنگی",
                            Name = "پیتزای پپرونی",
                            Picture = ""
                        },
                        new
                        {
                            Id = 17,
                            Description = "پیتزا با گوشت استیک، سیر و پنیر",
                            Name = "پیتزای سیر استیک",
                            Picture = ""
                        },
                        new
                        {
                            Id = 18,
                            Description = "پیتزای کلاسیک ایتالیایی با ترکیب ریحان تازه، گوجه‌فرنگی، پنیر موزارلا و روغن زیتون",
                            Name = "پیتزای ایتالیایی",
                            Picture = ""
                        },
                        new
                        {
                            Id = 19,
                            Description = "پیتزا با انواع سبزیجات تازه مانند قارچ، فلفل دلمه‌ای، زیتون و پنیر",
                            Name = "پیتزا سبزیجات",
                            Picture = ""
                        },
                        new
                        {
                            Id = 20,
                            Description = "پیتزا با گوشت چرخ کرده، پنیر موزارلا، فلفل دلمه‌ای و سس گوجه‌فرنگی",
                            Name = "پیتزای امریکایی",
                            Picture = ""
                        },
                        new
                        {
                            Id = 21,
                            Description = "پیتزا با سوجوک (سوسیس ترکی) به همراه پنیر و سبزیجات",
                            Name = "پیتزای سوجوک",
                            Picture = ""
                        },
                        new
                        {
                            Id = 22,
                            Description = "پیتزا با سس آلفردو، مرغ پخته و پنیر",
                            Name = "پاستا الفردو",
                            Picture = ""
                        },
                        new
                        {
                            Id = 23,
                            Description = "لازانیا با لایه‌های نودل، گوشت چرخ کرده، پنیر و سس بشامل",
                            Name = "لازانیا گوشت",
                            Picture = ""
                        },
                        new
                        {
                            Id = 24,
                            Description = "مرغ پخته شده با سس خامه‌ای، پیاز و قارچ",
                            Name = "چیکن استراناگوف",
                            Picture = ""
                        },
                        new
                        {
                            Id = 25,
                            Description = "مرغ تکه‌ای پخته شده با طعم‌های مختلف و پوشش داغ و ترد از آرد و ادویه",
                            Name = "مرغ سخاری",
                            Picture = ""
                        },
                        new
                        {
                            Id = 26,
                            Description = "کاهو گوجه خیار سس مخصوص",
                            Name = "سالاد",
                            Picture = ""
                        },
                        new
                        {
                            Id = 27,
                            Description = "کاهو مرغ گریل شده",
                            Name = "سالاد سزار",
                            Picture = ""
                        },
                        new
                        {
                            Id = 29,
                            Description = "بزرگ",
                            Name = "آب",
                            Picture = ""
                        },
                        new
                        {
                            Id = 30,
                            Description = "بزرگ",
                            Name = "نوشابه مشکی",
                            Picture = ""
                        },
                        new
                        {
                            Id = 31,
                            Description = "بزرگ",
                            Name = "نوشابه زرد",
                            Picture = ""
                        },
                        new
                        {
                            Id = 32,
                            Description = "بزرگ",
                            Name = "اسپرایت",
                            Picture = ""
                        },
                        new
                        {
                            Id = 33,
                            Description = "بزرگ",
                            Name = "دوغ",
                            Picture = ""
                        },
                        new
                        {
                            Id = 34,
                            Description = "بزرگ",
                            Name = "آب گازدار",
                            Picture = ""
                        });
                });

            modelBuilder.Entity("Hotel_Booking_Domain.Core.Entitys.HotelFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailableInYourHotel")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("HotelId");

                    b.ToTable("hotelFood");
                });

            modelBuilder.Entity("Hotel_Booking_Domain.Core.Entitys.HotelRules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("hotelRules");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Address", b =>
                {
                    b.HasOne("Entitys_Hotel.Models.Customer", "Customer")
                        .WithMany("Address")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Booking", b =>
                {
                    b.HasOne("Entitys_Hotel.Models.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entitys_Hotel.Models.Hotel", "Hotel")
                        .WithMany("Bookings")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entitys_Hotel.Models.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Hotel");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Hotel", b =>
                {
                    b.HasOne("Entitys_Hotel.Models.HotelManager", "HotelManager")
                        .WithMany("hotels")
                        .HasForeignKey("HotelManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HotelManager");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.HotelAddress", b =>
                {
                    b.HasOne("Entitys_Hotel.Models.Hotel", "Hotel")
                        .WithMany("HotelAddresses")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.HotelComments", b =>
                {
                    b.HasOne("Entitys_Hotel.Models.Customer", "Customer")
                        .WithMany("HotelComments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entitys_Hotel.Models.Hotel", "Hotel")
                        .WithMany("HotelComments")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Room", b =>
                {
                    b.HasOne("Entitys_Hotel.Models.Hotel", "Hotel")
                        .WithMany("rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("FacilityHotel", b =>
                {
                    b.HasOne("Hotel_Booking_Domain.Core.Entitys.Facility", null)
                        .WithMany()
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entitys_Hotel.Models.Hotel", null)
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hotel_Booking_Domain.Core.Entitys.ChatConversation", b =>
                {
                    b.HasOne("Entitys_Hotel.Models.Customer", "Customer")
                        .WithMany("Conversation")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Hotel_Booking_Domain.Core.Entitys.HotelFood", b =>
                {
                    b.HasOne("Hotel_Booking_Domain.Core.Entitys.Food", "Food")
                        .WithMany("HotelFoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entitys_Hotel.Models.Hotel", "Hotel")
                        .WithMany("hotelFoods")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Hotel_Booking_Domain.Core.Entitys.HotelRules", b =>
                {
                    b.HasOne("Entitys_Hotel.Models.Hotel", "Hotel")
                        .WithMany("HotelRules")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Customer", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Bookings");

                    b.Navigation("Conversation");

                    b.Navigation("HotelComments");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Hotel", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("HotelAddresses");

                    b.Navigation("HotelComments");

                    b.Navigation("HotelRules");

                    b.Navigation("hotelFoods");

                    b.Navigation("rooms");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.HotelManager", b =>
                {
                    b.Navigation("hotels");
                });

            modelBuilder.Entity("Entitys_Hotel.Models.Room", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Hotel_Booking_Domain.Core.Entitys.Food", b =>
                {
                    b.Navigation("HotelFoods");
                });
#pragma warning restore 612, 618
        }
    }
}
